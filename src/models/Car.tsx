/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: KrStolorz (Krzysztof Stolorz) (https://sketchfab.com/KrStolorz)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/1997-fso-polonez-mr97-lp-1aaeb91beaaf4a9c9af944e72c1b93fe
Title: 1997 FSO Polonez MR97 (LP)
*/

'use client';

import React, { useRef } from 'react';
import { useGLTF } from '@react-three/drei';
import { Mesh, BufferGeometry, Object3D } from 'three';
import { useEffect, useState } from 'react';
import { useFrame, useThree } from '@react-three/fiber';

export function Car({ carScene, ...props }: any) {
  const carRef: any = useRef<Object3D>(null);
  const { scene }: any = useGLTF(carScene);
  const [isPointerDown, setIsPointerDown] = useState(false);
  const { gl, viewport } = useThree();

  const lastX = useRef(0);
  const lastY = useRef(0);

  const handlePointerDown = (e: PointerEvent) => {
    setIsPointerDown(true);
    lastX.current = e.clientX;
    lastY.current = e.clientY;
  };

  const handlePointerUp = () => {
    setIsPointerDown(false);
  };

  const handlePointerMove = (e: PointerEvent) => {
    if (isPointerDown && carRef.current) {
      const dx = (e.clientX - lastX.current) / viewport.width;
      const dy = (e.clientY - lastY.current) / viewport.height;

      carRef.current.rotation.y += dx * Math.PI * 0.05;
      // carRef.current.rotation.x += dy * Math.PI * 0.01;

      lastX.current = e.clientX;
      // lastY.current = e.clientY;
    }
  };

  useFrame(() => {
    if (carRef.current && !isPointerDown) {
      carRef.current.rotation.y += 0.01;
    }
  });

  useEffect(() => {
    const canvas = gl.domElement;
    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
    };
  }, [gl, handlePointerDown, handlePointerMove, handlePointerUp]);

  return (
    <mesh ref={carRef} {...props} dispose={null}>
      <primitive object={scene} />
    </mesh>
  );
}
